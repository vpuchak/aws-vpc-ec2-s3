---
- name: Create new vpc
  ec2_vpc_net:
    name: task-vpc
    cidr_block: 10.0.0.0/16
    region: "{{ region }}"
    dns_hostnames: yes
    dns_support: yes
    state: present
    tags:
      Project: task
    tenancy: default
#  register: vpc
  tags:
    - vpc

- name: Gather facts about vpc
  ec2_vpc_net_facts:
    region: "{{ region }}"
    filters:
      "tag:Name": task-vpc
      "tag:Project": task
  register: vpc
- debug: var=vpc
- set_fact:
    vpc_id: "{{ vpc.vpcs[0].id }}"

- name: Create igw
  ec2_vpc_igw:
    region: "{{ region }}"
    vpc_id: "{{ vpc_id }}"
    state: present
#  register: igw

- name: Gather facts about IGW
  ec2_vpc_igw_facts:
    region: "{{ region }}"
    filters:
      attachment.vpc-id: "{{ vpc_id }}"
  register: igw
- debug: var=igw
- set_fact:
    igw_id: "{{ igw.internet_gateways[0].internet_gateway_id }}"

- name: Create subnet for instance
  ec2_vpc_subnet:
    state: present
    region: "{{ region }}"
    az: "{{ az }}"
    vpc_id: "{{ vpc_id }}"
    cidr: 10.0.0.0/28
    tags:
      Name: task-subnet
      Project: task
#  register: task-subnet

- name: Gather facts about subnets in vpc
  ec2_vpc_subnet_facts:
    region: "{{ region }}"
    filters:
      vpc-id: "{{ vpc_id }}"
      "tag:Name": task-subnet
      "tag:Project": task
  register: subnet

- debug: var=subnet
- set_fact:
    subnet_id: "{{ subnet.subnets[0].id }}"

- name: Look for route table
  ec2_vpc_route_table_facts:
    region: "{{ region }}"
    filters:
      vpc-id: "{{ vpc_id }}"
      "tag:Name": public-rt
      "tag:Project": task
      "tag:Public": yes
  register: rt
- debug: var=rt

- name: Set up public subnet route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    lookup: tag
#    route_table_id: "{{ rt.route_tables[].id }}"
    tags:
      Name: public-rt
      Public: yes
      Project: task
    subnets:
      - "{{ subnet_id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw_id }}"
  register: rt
- debug: var=rt
- set_fact:
    rt_id: "{{ rt.route_table.id }}"


- name: Create and associate task network ACL with public subnet
  ec2_vpc_nacl:
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    name: public-nacl
    subnets: "{{ subnet_id }}"
    tags:
      Project: task
    ingress: [
        # rule no, protocol, allow/deny, cidr, icmp_code, icmp_type,
        #                                             port from, port to
        [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
    ]
    egress: [
        [100, 'all', 'allow', '0.0.0.0/0', null, null, null, null]
    ]
    state: present
  register: nacl

#- name: Gather facts about network ACLs
#  ec2_vpc_nacl_facts:
#    region: "{{ region }}"
#    filters:
#      vpc-id: "{{ vpc_id }}"
#      "tag:Project": task
  
- debug: var=nacl
- set_fact:
    nacl_id: "{{ nacl.nacl_id }}"

    
- name: Create endpoint
  ec2_vpc_endpoint:
    state: present
    region: "{{ region }}"
    vpc_id: "{{ vpc_id }}"
    service: "com.amazonaws.{{ region }}.s3"
    policy: "{{ lookup( 'template', 'endpoint_policy.json.j2') }}"
    route_table_ids: "{{ rt_id }}"
  register: vpc_endpoint
- debug: var=vpc_endpoint


- name:           Create security group
  ec2_group:
    name:         "{{ item.name }}"
    description:  "{{ item.description }}"
    vpc_id:       "{{ vpc_id }}"
    region:       "{{ region }}"
    rules:        "{{ item.rules }}"
    rules_egress: "{{ item.rules_egress }}"
  with_items:     "{{ security_groups }}"


















